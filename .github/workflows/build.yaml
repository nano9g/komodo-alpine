name: komodo-alpine-build
run-name: Build Komodo binaries for Alpine

on:
  workflow_dispatch:

env:
  # Path (in the Komodo repo) to the file that will be passed to "docker buildx build"
  BINARIES_DOCKERFILE: bin/binaries.Dockerfile
  # Architectures (--platform argument for "docker buildx build")
  # Non-native requires QEMU
  #BUILD_PLATFORM: linux/amd64,linux/arm64
  BUILD_PLATFORM: linux/amd64
  # Subfolder for build artifacts
  OUTPUT_FOLDER: __build
  # Rust Alpine Docker image tag suffix (rust:X.Y.Z-alpineX.Y)
  ALPINE_IMAGE_TAG: alpine3.22

jobs:
  komodo-build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: moghtech/komodo
          ref: v1.19.3

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare
        shell: bash
        run: |
          echo "Creating build artifact folder"
          mkdir -p $OUTPUT_FOLDER
          echo "Updating Dockerfile with Alpine build dependencies"
          sed -i -E "s/(^FROM rust:[^-]+-)([^ ]+) /\1${ALPINE_IMAGE_TAG} /" $BINARIES_DOCKERFILE
          sed -i "/^WORKDIR \/builder/i RUN apk add --no-cache musl-dev\n" $BINARIES_DOCKERFILE
          # No need to build Komodo Core
          # Preserve continuations for build commands (&& \) to avoid errors if things are reorderd
          sed -i -E 's/cargo build.*komodo_(core|cli) --release(.*)?/echo ""\2/' $BINARIES_DOCKERFILE
          sed -i -E '/COPY.*--from.*\/(core|km)/d' $BINARIES_DOCKERFILE
          echo -e "-----\nModified Dockerfile\n------\n"
          cat $BINARIES_DOCKERFILE

      - name: Build Komodo binaries
        run: |
          docker buildx build -f $BINARIES_DOCKERFILE --platform $BUILD_PLATFORM --output type=local,dest=$OUTPUT_FOLDER .

      - name: Check result
        run: |
          ls -l
          echo "------"
          ls -l $OUTPUT_FOLDER
          echo "------"
