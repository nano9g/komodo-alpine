name: komodo-alpine-build
run-name: Build Komodo binaries for Alpine

on:
  workflow_dispatch:

env:
  KOMODO_REPO: moghtech/komodo
  
  # Path (in the Komodo repo) to the file that will be passed to "docker buildx build"
  BINARIES_DOCKERFILE: bin/binaries.Dockerfile
  
  # Lines to remove from the Dockerfile for things we aren't building
  # These will be used in a regex, so separate multiple items with a pipe |
  # Matching "cargo build -p komodo_<DOCKERFILE_CARGO_BUILD_REMOVE> --release && \"
  DOCKERFILE_CARGO_BUILD_REMOVE: 'core|cli'
  # Matching "COPY --from=builder /builder/target/release/<DOCKERFILE_COPY_FROM_BUILDER_REMOVE> /km"
  DOCKERFILE_COPY_FROM_BUILDER_REMOVE: 'core|km'
  
  # Architectures (--platform argument for "docker buildx build")
  # Non-native requires QEMU
  #BUILD_PLATFORM: linux/amd64,linux/arm64
  BUILD_PLATFORM: linux/amd64
  
  # Subfolder for build artifacts
  OUTPUT_FOLDER: __build
  
  # Rust Alpine Docker image tag suffix (rust:X.Y.Z-alpineX.Y)
  ALPINE_IMAGE_TAG: alpine3.22

jobs:
  # This is the lightweight job that runs and decides whether to perform builds
  release-check:
    name: Komodo version check
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      komodo_tag: ${{ steps.check.outputs.komodo_tag }}

    steps:
      - name: Check
        id: check
        shell: bash
        run: |
          should_run=false

          latest_komodo_release=$(curl --no-progress-meter "${GITHUB_API_URL}/repos/${KOMODO_REPO}/releases?per_page=1")
          komodo_tag=$(echo "$latest_komodo_release" | jq -r '.[0].tag_name')
          komodo_release_url=$(echo "$latest_komodo_release" | jq -r '.[0].html_url')
          our_tag=$(curl --no-progress-meter "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases?per_page=1" | jq -r '.[0].tag_name')

          if [[ "$komodo_tag" != "$our_tag" ]]; then
            should_run=true
          fi

          echo "Komodo tag: $komodo_tag"
          echo "Our tag: $our_tag"
          echo "Should run?: $should_run"

          echo "komodo_tag=${komodo_tag}" >> $GITHUB_OUTPUT
          echo "komodo_release_url=${komodo_release_url}" >> $GITHUB_OUTPUT
          echo "should_run=${should_run}" >> $GITHUB_OUTPUT


  # Actual builds, only invoked when release-check says it's needed
  komodo-build:
    name: Build and release
    runs-on: ubuntu-latest
    needs: release-check
    if: needs.release-check.outputs.should_run == 'true'
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:

      - name: Checkout current Komodo release
        uses: actions/checkout@v4
        with:
          repository: ${{ env.KOMODO_REPO }}
          ref: ${{ needs.release-check.outputs.komodo_tag }}
          path: komodo

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
    
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Prepare
        shell: bash
        working-directory: ${{ github.workspace }}/komodo
        run: |
          echo "Creating build artifact folder"
          mkdir -p $OUTPUT_FOLDER
          echo -e "-----\nModified $BINARIES_DOCKERFILE\n------\n"
          sed -i -E "s/(^FROM rust:[^-]+-)([^ ]+) /\1${ALPINE_IMAGE_TAG} /" $BINARIES_DOCKERFILE
          # Alpine build deps
          sed -i "/^WORKDIR \/builder/i ARG TARGETARCH\nRUN apk add --no-cache musl-dev\n" $BINARIES_DOCKERFILE
          # Remove commands for things we're not building
          # Preserve continuations for build commands (&& \) to avoid errors if things are reordered
          sed -i -E 's/cargo build.*komodo_(core|cli) --release(.*)?/echo ""\2/' $BINARIES_DOCKERFILE
          sed -i -E '/COPY.*--from.*\/(core|km)/d' $BINARIES_DOCKERFILE
          # Add architecture suffixes to artifacts
          sed -i -E '/^FROM scratch/a ARG TARGETARCH' $BINARIES_DOCKERFILE
          sed -i -E '/COPY.*--from/s/$/_$TARGETARCH/' $BINARIES_DOCKERFILE
          # Output for logging
          cat $BINARIES_DOCKERFILE

          # Testing only
          echo "." > "$GITHUB_WORKSPACE/komodo/$OUTPUT_FOLDER/periphery_aarch64"
          echo "." > "$GITHUB_WORKSPACE/komodo/$OUTPUT_FOLDER/periphery_amd64"

      # - name: Build Komodo binaries
      #   working-directory: ${{ github.workspace }}/komodo
      #   run: |
      #     docker buildx build -f $BINARIES_DOCKERFILE --platform $BUILD_PLATFORM --output type=local,dest=$OUTPUT_FOLDER .
      
      # Compress each executable in the build folder into its own .tar.gz,
      # renaming to remove the "_<architecture>" suffix beforehand
      - name: Compress artifacts
        id: compress
        working-directory: ${{ github.workspace }}/komodo/${{ env.OUTPUT_FOLDER }}
        run: |
          for filename in ./*; do
              [ -e "$filename" ] || continue
              newname=${filename%_*}
              archive="${filename}.tar.gz"
              mv $filename $newname
              echo $archive
              tar -czvf $archive -C ./ $newname
              mv $newname $filename
          done

      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          path: komodo-alpine

      - name: Create tag
        shell: bash
        working-directory: ${{ github.workspace }}/komodo-alpine
        run: |
          cd $GITHUB_WORKSPACE/komodo-alpine
          git config --global user.name '${{ github.actor }}'
          git config --global user.email '${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com'
          git tag -l
          git tag -a "${{ needs.release-check.outputs.komodo_tag }}" -m ":lizard: ${{ needs.release-check.outputs.komodo_tag }}"
          git push origin ${{ needs.release-check.outputs.komodo_tag }}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: |
            See [Komodo release notes](${{ needs.release-check.outputs.komodo_release_url }}).
          files: ${{ github.workspace }}/komodo/${{ env.OUTPUT_FOLDER }}/*.tar.gz
          tag_name: ${{ needs.release-check.outputs.komodo_tag }}
