name: komodo-alpine-build
run-name: Build Komodo binaries for Alpine

on:
  workflow_dispatch:

env:
  # Path (in the Komodo repo) to the file that will be passed to "docker buildx build"
  BINARIES_DOCKERFILE: bin/binaries.Dockerfile
  
  # Lines to remove from the Dockerfile for things we aren't building
  # These will be used in a regex, so separate multiple items with a pipe |
  # Matching "cargo build -p komodo_<DOCKERFILE_CARGO_BUILD_REMOVE> --release && \"
  DOCKERFILE_CARGO_BUILD_REMOVE: 'core|cli'
  # Matching "COPY --from=builder /builder/target/release/<DOCKERFILE_COPY_FROM_BUILDER_REMOVE> /km"
  DOCKERFILE_COPY_FROM_BUILDER_REMOVE: 'core|km'
  
  # Architectures (--platform argument for "docker buildx build")
  # Non-native requires QEMU
  #BUILD_PLATFORM: linux/amd64,linux/arm64
  BUILD_PLATFORM: linux/amd64
  
  # Subfolder for build artifacts
  OUTPUT_FOLDER: __build
  
  # Rust Alpine Docker image tag suffix (rust:X.Y.Z-alpineX.Y)
  ALPINE_IMAGE_TAG: alpine3.22

jobs:
  release-check:
    name: Determine if there's a new Komodo release
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      komodo_tag: ${{ steps.check.outputs.komodo_tag }}

    steps:
      - name: Check
        id: check
        shell: bash
        run: |
          should_run=false
          
          echo "$GITHUB_API_URL"
          echo "$GITHUB_REPOSITORY"

          komodo_tag=$(curl --no-progress-meter "${GITHUB_API_URL}/repos/moghtech/komodo/releases?per_page=1" | grep '"tag_name":' | grep -Eo "v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+")
          echo "komodo_tag: $komodo_tag"

          curl --no-progress-meter "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases?per_page=1
          
          our_tag=$(curl --no-progress-meter "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases?per_page=1" | grep '"tag_name":' | grep -Eo "v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+")
          echo "our_tag: $our_tag"

          if [[ "$komodo_tag" != "$our_tag" ]]; then
            should_run=true
          fi

          echo "Komodo tag: $komodo_tag"
          echo "Our tag: $our_tag"
          echo "Should run?: $should_run"

          echo "komodo_tag=${komodo_tag}" >> $GITHUB_OUTPUT
          echo "should_run=${should_run}" >> $GITHUB_OUTPUT
  
  komodo-build:
    runs-on: ubuntu-latest
    needs: release-check
    if: needs.release-check.outputs.should_run == 'true'
    steps:

      - name: Would run
        shell: bash
        run: |
          echo "Would run for ${{ needs.release-check.outputs.komodo_tag }}"

      # - name: Checkout
      #   uses: actions/checkout@v4
      #   with:
      #     repository: moghtech/komodo
      #     ref: v1.19.3

      # # - name: Set up QEMU
      # #   uses: docker/setup-qemu-action@v3
    
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Prepare
      #   shell: bash
      #   run: |
      #     echo "Creating build artifact folder"
      #     mkdir -p $OUTPUT_FOLDER
      #     echo -e "-----\nModified Dockerfile\n------\n"
      #     sed -i -E "s/(^FROM rust:[^-]+-)([^ ]+) /\1${ALPINE_IMAGE_TAG} /" $BINARIES_DOCKERFILE
      #     sed -i "/^WORKDIR \/builder/i RUN apk add --no-cache musl-dev\n" $BINARIES_DOCKERFILE
      #     # Remove commands for things we're not building
      #     # Preserve continuations for build commands (&& \) to avoid errors if things are reorderd
      #     sed -i -E 's/cargo build.*komodo_(core|cli) --release(.*)?/echo ""\2/' $BINARIES_DOCKERFILE
      #     sed -i -E '/COPY.*--from.*\/(core|km)/d' $BINARIES_DOCKERFILE
      #     # Output for logging
      #     cat $BINARIES_DOCKERFILE

      # - name: Build Komodo binaries
      #   run: |
      #     docker buildx build -f $BINARIES_DOCKERFILE --platform $BUILD_PLATFORM --output type=local,dest=$OUTPUT_FOLDER .

      # - name: Check result
      #   run: |
      #     ls -l
      #     echo "------"
      #     ls -l $OUTPUT_FOLDER
      #     echo "------"
